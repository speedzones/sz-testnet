// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"github.com/shx-project/sphinx/common"
	"github.com/shx-project/sphinx/common/hexutil"
)

func (r Receipt) MarshalJSON() ([]byte, error) {
	type Receipt struct {
		Status    hexutil.Uint  `json:"status"`
		TxHash    common.Hash   `json:"transactionHash" gencodec:"required"`
		ConfirmCount 	hexutil.Uint64 `json:"confirmed" gencodec:"required"`
	}
	var enc Receipt
	enc.Status = hexutil.Uint(r.Status)
	enc.TxHash = r.TxHash
	enc.ConfirmCount = hexutil.Uint64(r.ConfirmCount)
	return json.Marshal(&enc)
}

func (r *Receipt) UnmarshalJSON(input []byte) error {
	type Receipt struct {
		Status    *hexutil.Uint `json:"status"`
		TxHash    *common.Hash  `json:"transactionHash" gencodec:"required"`
		ConfirmCount 	*hexutil.Uint64 `json:"confirmed" gencodec:"required"`
	}
	var dec Receipt
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Status != nil {
		r.Status = uint(*dec.Status)
	}
	if dec.TxHash == nil {
		return errors.New("missing required field 'transactionHash' for Receipt")
	}
	r.TxHash = *dec.TxHash
	r.ConfirmCount = uint64(*dec.ConfirmCount)
	return nil
}
