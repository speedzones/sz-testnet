// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package bc

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/shx-project/sphinx/common"
	"github.com/shx-project/sphinx/common/hexutil"
	"github.com/shx-project/sphinx/common/math"
	"github.com/shx-project/sphinx/config"
)

func (g Genesis) MarshalJSON() ([]byte, error) {
	type Genesis struct {
		Config     *config.ChainConfig                         `json:"config"`
		Timestamp  math.HexOrDecimal64                         `json:"timestamp"`
		ExtraData  hexutil.Bytes                               `json:"extraData"`
		Difficulty *math.HexOrDecimal256                       `json:"difficulty" gencodec:"required"`
		Coinbase   common.Address                              `json:"coinbase"`
		
		Number     math.HexOrDecimal64                         `json:"number"`
		ParentHash common.Hash                                 `json:"parentHash"`
	}
	
	
	var enc Genesis
	
	enc.Config= g.Config

	enc.Timestamp = math.HexOrDecimal64(g.Timestamp)
	enc.ExtraData = g.ExtraData
	enc.Difficulty = (*math.HexOrDecimal256)(g.Difficulty)
	enc.Coinbase = g.Coinbase

	
	enc.Number = math.HexOrDecimal64(g.Number)
	enc.ParentHash = g.ParentHash
	return json.Marshal(&enc)
}

func (g *Genesis) UnmarshalJSON(input []byte) error {
	type Genesis struct {
		Config     *config.ChainConfig                         `json:"config"`
		Timestamp  *math.HexOrDecimal64                        `json:"timestamp"`
		ExtraData  hexutil.Bytes                               `json:"extraData"`
		Difficulty *math.HexOrDecimal256                       `json:"difficulty" gencodec:"required"`
		Coinbase   *common.Address                             `json:"coinbase"`
		
		Number     *math.HexOrDecimal64                        `json:"number"`
		ParentHash *common.Hash                                `json:"parentHash"`
	}
	var dec Genesis
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Config != nil {
		g.Config = dec.Config
	}
	if dec.Timestamp != nil {
		g.Timestamp = uint64(*dec.Timestamp)
	}
	if dec.ExtraData != nil {
		g.ExtraData = dec.ExtraData
	}
	
	if dec.Difficulty == nil {
		return errors.New("missing required field 'difficulty' for Genesis")
	}
	g.Difficulty = (*big.Int)(dec.Difficulty)
	if dec.Coinbase != nil {
		g.Coinbase = *dec.Coinbase
	}
	if dec.Number != nil {
		g.Number = uint64(*dec.Number)
	}
	if dec.ParentHash != nil {
		g.ParentHash = *dec.ParentHash
	}
	return nil
}
